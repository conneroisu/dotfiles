{
  # High-level description of this flake configuration
  description = "Conner Ohnesorge's NixOS Config";

  # External dependencies (other flakes) that this configuration relies on
  inputs = {
    # Determinate Systems tools
    determinate.url = "https://flakehub.com/f/DeterminateSystems/determinate/*";
    
    # The main Nix packages repository, using the unstable branch
    nixpkgs.url = "github:nixos/nixpkgs?ref=nixos-unstable";
    
    # Provides a modular approach to Nix flakes
    flake-parts = {
      url = "github:hercules-ci/flake-parts";
      inputs.nixpkgs-lib.follows = "nixpkgs"; # Re-use the nixpkgs input instead of fetching again
    };

    # Common utilities for working with flakes
    flake-utils = {
      url = "github:numtide/flake-utils";
      inputs.systems.follows = "systems"; # Re-use the systems input
    };

    # Tool for building OCI containers from Nix expressions
    nix2container.url = "github:nlewo/nix2container";
    nix2container.inputs = {
      nixpkgs.follows = "nixpkgs"; # Re-use the nixpkgs input
      flake-utils.follows = "flake-utils"; # Re-use the flake-utils input
    };

    # Compatibility layer for running unpatched dynamic binaries
    nix-ld = {
      url = "github:Mic92/nix-ld";
      inputs.nixpkgs.follows = "nixpkgs"; # Re-use the nixpkgs input
    };

    # Library for Snowfall-style Nix configurations
    snowfall-lib = {
      url = "github:snowfallorg/lib";
      inputs.nixpkgs.follows = "nixpkgs"; # Re-use the nixpkgs input
    };

    # Tool for managing user environments (dotfiles)
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs"; # Re-use the nixpkgs input
    };

    # NixOS module for macOS
    darwin = {
      url = "github:LnL7/nix-darwin/master";
      inputs.nixpkgs.follows = "nixpkgs"; # Re-use the nixpkgs input
    };

    # Homebrew package repositories - marked as non-flakes
    homebrew-core = {
      url = "github:Homebrew/homebrew-core";
      flake = false; # Not a flake, just a repository
    };

    homebrew-cask = {
      url = "github:Homebrew/homebrew-cask";
      flake = false; # Not a flake, just a repository
    };

    homebrew-bundle = {
      url = "github:Homebrew/homebrew-bundle";
      flake = false; # Not a flake, just a repository
    };

    # Utility for generating .gitignore patterns in Nix
    gitignore = {
      url = "github:hercules-ci/gitignore.nix";
      inputs.nixpkgs.follows = "nixpkgs"; # Re-use the nixpkgs input
    };

    # Tool for declarative disk partitioning in NixOS
    disko = {
      url = "github:nix-community/disko";
      inputs.nixpkgs.follows = "nixpkgs"; # Re-use the nixpkgs input
    };

    # Nix User Repository - community-maintained packages and modules
    nur = {
      url = "github:nix-community/NUR";
      inputs.nixpkgs.follows = "nixpkgs"; # Re-use the nixpkgs input
    };

    # A shell prompt customization package
    ashell = {
      url = "github:MalpenZibo/ashell?rev=4a1c9e0c788e0e1c4aac9522d39a44cce7c24ef2"; # Pinned to specific commit
      inputs.nixpkgs.follows = "nixpkgs"; # Re-use the nixpkgs input
    };

    # nh - Nix helper/wrapper tool
    nh = {
      url = "github:viperML/nh/master?tag=v4.0.0-beta.8"; # Specific version
      inputs = {
        nixpkgs.follows = "nixpkgs"; # Re-use the nixpkgs input
      };
    };

    # Snowfall flake infrastructure
    snowfall-flake = {
      url = "github:snowfallorg/flake";
      inputs.nixpkgs.follows = "nixpkgs"; # Re-use the nixpkgs input
    };

    # Rust overlay providing different Rust toolchains
    rust-overlay = {
      url = "github:oxalica/rust-overlay";
      inputs.nixpkgs.follows = "nixpkgs"; # Re-use the nixpkgs input
    };

    # Custom browser flake
    zen-browser.url = "github:conneroisu/zen-browser-flake?tag=v1.10.4"; # Pinned to specific version

    # Tool for system-wide styling configuration
    stylix.url = "github:danth/stylix";

    # Modern terminal emulator
    ghostty.url = "github:ghostty-org/ghostty/main";

    # Secret management tool for Nix
    sops-nix.url = "github:Mic92/sops-nix";

    # Integration of Homebrew with Nix
    nix-homebrew.url = "github:zhaofengli-wip/nix-homebrew";

    # Default set of systems to build for
    systems.url = "github:nix-systems/default";
    
    # Hardware-specific configurations for NixOS
    nixos-hardware.url = "github:NixOS/nixos-hardware/master";
    
    # Utility for creating standalone shell scripts from Nix expressions
    mk-shell-bin.url = "github:rrbutani/nix-mk-shell-bin";

    # Wayland compositor for Linux
    hyprland.url = "github:hyprwm/hyprland";
    hyprland.inputs.nixpkgs.follows = "nixpkgs"; # Re-use the nixpkgs input

    # Clan core infrastructure
    clan-core.url = "https://git.clan.lol/clan/clan-core/archive/main.tar.gz";
    nixpkgs.follows = "clan-core/nixpkgs"; # Override nixpkgs to use clan-core's

    # Database of index information for Nix packages
    nix-index-database.url = "github:nix-community/nix-index-database";
    nix-index-database.inputs.nixpkgs.follows = "nixpkgs"; # Re-use the nixpkgs input

    # Blink completion tool
    blink.url = "github:Saghen/blink.cmp";
    blink.inputs = {
      # TODO: follow fenix
      nixpkgs.follows = "nixpkgs"; # Re-use the nixpkgs input
      flake-parts.follows = "flake-parts"; # Re-use the flake-parts input
    };
  };

  # Global Nix configuration settings
  nixConfig = {
    # Binary caches to download pre-built packages from
    extra-substituters = ''
      https://cache.nixos.org
      https://nix-community.cachix.org
      https://devenv.cachix.org
    '';
    
    # Public keys for verifying binary cache integrity
    extra-trusted-public-keys = ''
      cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
      nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=
      devenv.cachix.org-1:w1cLUi8dv3hnoSPGAuibQv+f9TZLr6cv/Hm9XgU50cw=
    '';
    
    # Users allowed to perform privileged Nix operations
    trusted-users = [
      "root"
      "@wheel" # All users in the wheel group
      "connerohnesorge"
    ];
    
    # Enable experimental features by default
    extra-experimental-features = "nix-command flakes";
    
    # Maximum number of parallel build jobs
    max-jobs = 8;
  };

  # Define the outputs of this flake
  outputs = inputs @ {flake-parts, ...}:
    flake-parts.lib.mkFlake {inherit inputs;} {
      # Supported system architectures
      systems = [
        "x86_64-linux"
        "i686-linux"
        "x86_64-darwin"
        "aarch64-linux"
        "aarch64-darwin"
      ];

      # Per-system outputs (empty in this case, using flake-wide outputs instead)
      perSystem = _: {};
      
      # Flake-wide outputs
      flake = let
        inherit (inputs) snowfall-lib;
        
        # Initialize the Snowfall library with configuration
        lib = snowfall-lib.mkLib {
          inherit inputs;
          src = ./.;

          # Snowfall namespace configuration
          snowfall = {
            namespace = "csnow";
            meta = {
              name = "csnow";
              title = "Conner Ohnesorge's Snowflake";
            };
          };
        };

        # Common configuration for all systems
        config = {
          nix.settings = {
            experimental-features = [
              "nix-command"
              "flakes"
            ];
            trusted-users = [
              "root"
              "connerohnesorge"
              "@wheel"
            ];
            allowed-users = [
              "root"
              "connerohnesorge"
              "@wheel"
            ];
          };
        };
        
        # Home-manager configuration
        homie = {
          home-manager.useGlobalPkgs = false; # Don't use global packages
          home-manager.useUserPackages = true; # Install packages to user profile
        };
      in
        # Generate the final flake using Snowfall
        lib.mkFlake {
          inherit inputs;
          src = ./.;
          
          # Allow unfree packages in all channels
          channels-config = {
            allowUnfree = true;
          };
          
          # System-specific modules
          systems.modules = {
            # Add modules to all NixOS systems
            nixos = with inputs; [
              determinate.nixosModules.default
              ./modules/shared
              home-manager.nixosModules.home-manager
              stylix.nixosModules.stylix
              nix-ld.nixosModules.nix-ld
              disko.nixosModules.disko
              nur.modules.nixos.default
              {programs.nix-ld.dev.enable = true;} # Enable nix-ld development environment
              sops-nix.nixosModules.default
              nix-index-database.nixosModules.nix-index
              config
              homie
            ];

            # Add modules to all Darwin (macOS) systems
            darwin = with inputs; [
              {nix.nixPath = ["darwin=/Users/connerohnesorge/.nix-defexpr/darwin"];} # Set darwin path
              ./modules/shared
              nix-homebrew.darwinModules.nix-homebrew
              home-manager.darwinModules.home-manager
              sops-nix.darwinModules.default
              nix-index-database.darwinModules.nix-index
              config
              homie
            ];
          };
          
          # Additional outputs
          outputs-builder = channels: {
            formatter = channels.nixpkgs.alejandra; # Set alejandra as the formatter
          };
        };
    };
}
